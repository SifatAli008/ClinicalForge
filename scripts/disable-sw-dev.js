#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('🔧 Disabling service worker for development...');

const swPath = path.join(process.cwd(), 'public', 'sw.js');
const swBackupPath = path.join(process.cwd(), 'public', 'sw.js.backup');

// Check if service worker exists
if (!fs.existsSync(swPath)) {
  console.log('ℹ️  No service worker found');
  process.exit(0);
}

// Check if already disabled
if (fs.existsSync(swBackupPath)) {
  console.log('⚠️  Service worker already disabled');
  console.log('To re-enable, run: npm run enable-sw');
  process.exit(0);
}

try {
  // Backup original service worker
  fs.copyFileSync(swPath, swBackupPath);
  console.log('✅ Service worker backed up');
  
  // Create a minimal service worker that does nothing
  const minimalSW = `// Service Worker Disabled for Development
// This file is automatically generated to disable SW during development
// Original file backed up as sw.js.backup

console.log('Service Worker disabled for development');

// Minimal event listeners that do nothing
self.addEventListener('install', () => {
  console.log('SW disabled - skipping install');
  self.skipWaiting();
});

self.addEventListener('activate', () => {
  console.log('SW disabled - skipping activate');
  self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  // Do nothing - let browser handle all requests
  console.log('SW disabled - passing through request:', event.request.url);
});
`;

  fs.writeFileSync(swPath, minimalSW);
  console.log('✅ Service worker disabled for development');
  console.log('💡 This should fix Fast Refresh issues');
  console.log('🔄 Restart your development server');
  
} catch (error) {
  console.error('❌ Failed to disable service worker:', error.message);
  process.exit(1);
} 