rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Enhanced Clinical Database Collection
    match /enhancedClinicalDatabase/{document} {
      // Allow read access if user is authenticated and has read access
      allow read: if request.auth != null && (
        // User is the creator/collaborator
        resource.data.collaboratorId == request.auth.uid ||
        // User has explicit read access
        request.auth.uid in resource.data.metadata.accessControl.readAccess ||
        // User has admin access
        request.auth.uid in resource.data.metadata.accessControl.adminAccess ||
        // Document is approved and user is authenticated
        (resource.data.status == 'approved' && request.auth != null)
      );
      
      // Allow write access if user is authenticated and has write access
      allow write: if request.auth != null && (
        // User is the creator/collaborator
        resource.data.collaboratorId == request.auth.uid ||
        // User has explicit write access
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        // User has admin access
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      // Allow create if user is authenticated
      allow create: if request.auth != null && 
        request.resource.data.collaboratorId == request.auth.uid;
      
      // Allow update if user is authenticated and has appropriate access
      allow update: if request.auth != null && (
        // User is the creator/collaborator
        resource.data.collaboratorId == request.auth.uid ||
        // User has explicit write access
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        // User has admin access
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      ) && (
        // Validate required fields for comprehensive parameter validation
        (request.resource.data.formType == 'comprehensive-parameter-validation' &&
         request.resource.data.comprehensiveData != null) ||
        // Validate required fields for advanced clinical analytics
        (request.resource.data.formType == 'advanced-clinical-analytics' &&
         request.resource.data.advancedAnalyticsData != null) ||
        // Validate required fields for unified clinical database
        (request.resource.data.formType == 'unified-clinical-database' &&
         request.resource.data.comprehensiveData != null &&
         request.resource.data.advancedAnalyticsData != null)
      );
      
      // Allow delete only for admin users or document creator
      allow delete: if request.auth != null && (
        // User is the creator/collaborator
        resource.data.collaboratorId == request.auth.uid ||
        // User has admin access
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
    }
    
    // Comprehensive Parameter Validation Collection (Legacy Support)
    match /comprehensiveParameterValidation/{document} {
      allow read: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.readAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess ||
        (resource.data.status == 'approved' && request.auth != null)
      );
      
      allow write: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      allow create: if request.auth != null && 
        request.resource.data.collaboratorId == request.auth.uid;
      
      allow update: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      allow delete: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
    }
    
    // Advanced Clinical Analytics Collection (Legacy Support)
    match /advancedClinicalAnalytics/{document} {
      allow read: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.readAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess ||
        (resource.data.status == 'approved' && request.auth != null)
      );
      
      allow write: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      allow create: if request.auth != null && 
        request.resource.data.collaboratorId == request.auth.uid;
      
      allow update: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      allow delete: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
    }
    
    // Form Submissions Collection (Legacy Support)
    match /formSubmissions/{document} {
      allow read: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.readAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess ||
        (resource.data.submissionStatus == 'approved' && request.auth != null)
      );
      
      allow write: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      allow create: if request.auth != null && 
        request.resource.data.collaboratorId == request.auth.uid;
      
      allow update: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.writeAccess ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
      
      allow delete: if request.auth != null && (
        resource.data.collaboratorId == request.auth.uid ||
        request.auth.uid in resource.data.metadata.accessControl.adminAccess
      );
    }
    
    // Users Collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Collaborators Collection
    match /collaborators/{collaboratorId} {
      allow read: if request.auth != null && (
        request.auth.uid == collaboratorId ||
        request.auth.uid in resource.data.accessControl.readAccess ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
      
      allow write: if request.auth != null && (
        request.auth.uid == collaboratorId ||
        request.auth.uid in resource.data.accessControl.writeAccess ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
      
      allow create: if request.auth != null && 
        request.resource.data.collaboratorId == request.auth.uid;
      
      allow update: if request.auth != null && (
        request.auth.uid == collaboratorId ||
        request.auth.uid in resource.data.accessControl.writeAccess ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
      
      allow delete: if request.auth != null && (
        request.auth.uid == collaboratorId ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
    }
    
    // Articles Collection
    match /articles/{articleId} {
      allow read: if request.auth != null && (
        resource.data.authorId == request.auth.uid ||
        request.auth.uid in resource.data.accessControl.readAccess ||
        request.auth.uid in resource.data.accessControl.adminAccess ||
        (resource.data.status == 'published' && request.auth != null)
      );
      
      allow write: if request.auth != null && (
        resource.data.authorId == request.auth.uid ||
        request.auth.uid in resource.data.accessControl.writeAccess ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
      
      allow create: if request.auth != null && 
        request.resource.data.authorId == request.auth.uid;
      
      allow update: if request.auth != null && (
        resource.data.authorId == request.auth.uid ||
        request.auth.uid in resource.data.accessControl.writeAccess ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
      
      allow delete: if request.auth != null && (
        resource.data.authorId == request.auth.uid ||
        request.auth.uid in resource.data.accessControl.adminAccess
      );
    }
    
    // Admin Collection (Admin-only access)
    match /admin/{document} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/admin/access).data.adminUsers;
    }
    
    // Analytics Collection (Read-only for authenticated users, write for admins)
    match /analytics/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/admin/access).data.adminUsers;
    }
    
    // Dashboard Collection (User-specific access)
    match /dashboard/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Notifications Collection (User-specific access)
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Settings Collection (User-specific access)
    match /settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Audit Log Collection (Admin-only access)
    match /auditLog/{document} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/admin/access).data.adminUsers;
    }
    
    // Backup Collection (Admin-only access)
    match /backups/{document} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/admin/access).data.adminUsers;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 